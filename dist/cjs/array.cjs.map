{"version":3,"file":"array.cjs","sources":["../../src/array.ts"],"sourcesContent":["export const first = <T>(\n  array: readonly T[],\n  defaultValue: T | null | undefined = undefined\n) => {\n  return array.length ? array[0] : defaultValue\n}\n\nexport const group = <T, Key extends string | number | symbol>(\n  array: readonly T[],\n  getGroupId: (item: T) => Key\n): Record<Key, T[]> => {\n  return array.reduce(\n    (acc, item) => {\n      const groupId = getGroupId(item)\n      if (!acc[groupId]) acc[groupId] = []\n      acc[groupId].push(item)\n      return acc\n    },\n    {} as Record<Key, T[]>\n  )\n}\n\n/**\n * Creates a duplicate-free version of an array\n * @param array - The array to inspect\n * @returns Returns the new duplicate free array\n * @example\n * uniq([2, 1, 2]) // [2, 1]\n * uniq(['a', 'b', 'a']) // ['a', 'b']\n */\nexport const uniq = <T>(array: readonly T[]): T[] => {\n  return Array.from(new Set(array))\n}\n\n/**\n * Flattens array a single level deep\n * @param array - The array to flatten\n * @returns Returns the new flattened array\n * @example\n * flatten([1, [2, [3, [4]], 5]]) // [1, 2, [3, [4]], 5]\n */\nexport const flatten = <T>(array: readonly (T | T[])[]): T[] => {\n  return array.reduce<T[]>((acc, val) => {\n    if (Array.isArray(val)) {\n      acc.push(...val)\n    } else {\n      acc.push(val)\n    }\n    return acc\n  }, [])\n}\n\n/**\n * Creates an array of elements split into groups the length of size\n * @param array - The array to process\n * @param size - The length of each chunk\n * @returns Returns the new array of chunks\n * @example\n * chunk(['a', 'b', 'c', 'd'], 2) // [['a', 'b'], ['c', 'd']]\n * chunk(['a', 'b', 'c', 'd'], 3) // [['a', 'b', 'c'], ['d']]\n */\nexport const chunk = <T>(array: readonly T[], size: number): T[][] => {\n  if (size <= 0) return []\n  const result: T[][] = []\n  for (let i = 0; i < array.length; i += size) {\n    result.push(array.slice(i, i + size))\n  }\n  return result\n}\n\n/**\n * Creates an array of numbers progressing from start up to, but not including, end\n * @param start - The start of the range\n * @param end - The end of the range\n * @param step - The value to increment or decrement by\n * @returns Returns the range of numbers\n * @example\n * range(0, 4) // [0, 1, 2, 3]\n * range(1, 5, 2) // [1, 3]\n * range(0, -4, -1) // [0, -1, -2, -3]\n */\nexport const range = (start: number, end?: number, step: number = 1): number[] => {\n  if (end === undefined) {\n    end = start\n    start = 0\n  }\n  \n  const result: number[] = []\n  if (step > 0) {\n    for (let i = start; i < end; i += step) {\n      result.push(i)\n    }\n  } else {\n    for (let i = start; i > end; i += step) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\n/**\n * Creates an array with all falsy values removed\n * @param array - The array to compact\n * @returns Returns the new array of filtered values\n * @example\n * compact([0, 1, false, 2, '', 3]) // [1, 2, 3]\n */\nexport const compact = <T>(array: readonly (T | null | undefined | false | 0 | '')[]): T[] => {\n  return array.filter(Boolean) as T[]\n}\n\n/**\n * Creates an array of shuffled values, using a version of the Fisher-Yates shuffle\n * @param array - The array to shuffle\n * @returns Returns the new shuffled array\n * @example\n * shuffle([1, 2, 3, 4]) // [4, 1, 3, 2] (random order)\n */\nexport const shuffle = <T>(array: readonly T[]): T[] => {\n  const result = [...array]\n  for (let i = result.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [result[i], result[j]] = [result[j], result[i]]\n  }\n  return result\n}\n"],"names":[],"mappings":";;AAAO,MAAM,KAAQ,GAAA,CACnB,KACA,EAAA,YAAA,GAAqC,KAClC,CAAA,KAAA;AACH,EAAA,OAAO,KAAM,CAAA,MAAA,GAAS,KAAM,CAAA,CAAC,CAAI,GAAA,YAAA,CAAA;AACnC,EAAA;AAEa,MAAA,KAAA,GAAQ,CACnB,KAAA,EACA,UACqB,KAAA;AACrB,EAAA,OAAO,KAAM,CAAA,MAAA;AAAA,IACX,CAAC,KAAK,IAAS,KAAA;AACb,MAAM,MAAA,OAAA,GAAU,WAAW,IAAI,CAAA,CAAA;AAC/B,MAAI,IAAA,CAAC,IAAI,OAAO,CAAA;AAAG,QAAI,GAAA,CAAA,OAAO,IAAI,EAAC,CAAA;AACnC,MAAI,GAAA,CAAA,OAAO,CAAE,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AACtB,MAAO,OAAA,GAAA,CAAA;AAAA,KACT;AAAA,IACA,EAAC;AAAA,GACH,CAAA;AACF,EAAA;AAUa,MAAA,IAAA,GAAO,CAAI,KAA6B,KAAA;AACnD,EAAA,OAAO,KAAM,CAAA,IAAA,CAAK,IAAI,GAAA,CAAI,KAAK,CAAC,CAAA,CAAA;AAClC,EAAA;AASa,MAAA,OAAA,GAAU,CAAI,KAAqC,KAAA;AAC9D,EAAA,OAAO,KAAM,CAAA,MAAA,CAAY,CAAC,GAAA,EAAK,GAAQ,KAAA;AACrC,IAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,GAAG,CAAG,EAAA;AACtB,MAAI,GAAA,CAAA,IAAA,CAAK,GAAG,GAAG,CAAA,CAAA;AAAA,KACV,MAAA;AACL,MAAA,GAAA,CAAI,KAAK,GAAG,CAAA,CAAA;AAAA,KACd;AACA,IAAO,OAAA,GAAA,CAAA;AAAA,GACT,EAAG,EAAE,CAAA,CAAA;AACP,EAAA;AAWa,MAAA,KAAA,GAAQ,CAAI,KAAA,EAAqB,IAAwB,KAAA;AACpE,EAAA,IAAI,IAAQ,IAAA,CAAA;AAAG,IAAA,OAAO,EAAC,CAAA;AACvB,EAAA,MAAM,SAAgB,EAAC,CAAA;AACvB,EAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,MAAA,EAAQ,KAAK,IAAM,EAAA;AAC3C,IAAA,MAAA,CAAO,KAAK,KAAM,CAAA,KAAA,CAAM,CAAG,EAAA,CAAA,GAAI,IAAI,CAAC,CAAA,CAAA;AAAA,GACtC;AACA,EAAO,OAAA,MAAA,CAAA;AACT,EAAA;AAaO,MAAM,KAAQ,GAAA,CAAC,KAAe,EAAA,GAAA,EAAc,OAAe,CAAgB,KAAA;AAChF,EAAA,IAAI,QAAQ,KAAW,CAAA,EAAA;AACrB,IAAM,GAAA,GAAA,KAAA,CAAA;AACN,IAAQ,KAAA,GAAA,CAAA,CAAA;AAAA,GACV;AAEA,EAAA,MAAM,SAAmB,EAAC,CAAA;AAC1B,EAAA,IAAI,OAAO,CAAG,EAAA;AACZ,IAAA,KAAA,IAAS,CAAI,GAAA,KAAA,EAAO,CAAI,GAAA,GAAA,EAAK,KAAK,IAAM,EAAA;AACtC,MAAA,MAAA,CAAO,KAAK,CAAC,CAAA,CAAA;AAAA,KACf;AAAA,GACK,MAAA;AACL,IAAA,KAAA,IAAS,CAAI,GAAA,KAAA,EAAO,CAAI,GAAA,GAAA,EAAK,KAAK,IAAM,EAAA;AACtC,MAAA,MAAA,CAAO,KAAK,CAAC,CAAA,CAAA;AAAA,KACf;AAAA,GACF;AACA,EAAO,OAAA,MAAA,CAAA;AACT,EAAA;AASa,MAAA,OAAA,GAAU,CAAI,KAAmE,KAAA;AAC5F,EAAO,OAAA,KAAA,CAAM,OAAO,OAAO,CAAA,CAAA;AAC7B,EAAA;AASa,MAAA,OAAA,GAAU,CAAI,KAA6B,KAAA;AACtD,EAAM,MAAA,MAAA,GAAS,CAAC,GAAG,KAAK,CAAA,CAAA;AACxB,EAAA,KAAA,IAAS,IAAI,MAAO,CAAA,MAAA,GAAS,CAAG,EAAA,CAAA,GAAI,GAAG,CAAK,EAAA,EAAA;AAC1C,IAAA,MAAM,IAAI,IAAK,CAAA,KAAA,CAAM,KAAK,MAAO,EAAA,IAAK,IAAI,CAAE,CAAA,CAAA,CAAA;AAC5C,IAAA,CAAC,MAAO,CAAA,CAAC,CAAG,EAAA,MAAA,CAAO,CAAC,CAAC,CAAI,GAAA,CAAC,MAAO,CAAA,CAAC,CAAG,EAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAA;AAAA,GAChD;AACA,EAAO,OAAA,MAAA,CAAA;AACT;;;;;;;;;;;"}